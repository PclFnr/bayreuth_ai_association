3:I[9275,[],""]
4:I[1343,[],""]
5:I[1747,["231","static/chunks/231-829f56fdb7c75283.js","55","static/chunks/55-c141fc066ff4a19d.js","472","static/chunks/472-cd817ab664ce0632.js","185","static/chunks/app/layout-1cfcfb656b6cf4a5.js"],"Providers"]
6:I[1227,["231","static/chunks/231-829f56fdb7c75283.js","55","static/chunks/55-c141fc066ff4a19d.js","472","static/chunks/472-cd817ab664ce0632.js","185","static/chunks/app/layout-1cfcfb656b6cf4a5.js"],"Layout"]
7:I[231,["231","static/chunks/231-829f56fdb7c75283.js","55","static/chunks/55-c141fc066ff4a19d.js","515","static/chunks/app/docs/use-cases-rag-chatbot/page-4b9d8097182892f7.js"],""]
0:["KteObhGWKN4CvpFO1QXQU",[[["",{"children":["docs",{"children":["use-cases-rag-chatbot",{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",{"children":["docs",{"children":["use-cases-rag-chatbot",{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","docs","children","use-cases-rag-chatbot","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","docs","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"en","className":"h-full antialiased __variable_01f60e __variable_a0637f","suppressHydrationWarning":true,"children":["$","body",null,{"className":"flex min-h-full bg-white dark:bg-zinc-900","children":["$","$L5",null,{"children":["$","$L6",null,{"children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-w-0 max-w-2xl flex-auto px-4 py-16 lg:max-w-none lg:pl-8 lg:pr-0 xl:px-16","children":["$","div",null,{"className":"flex h-full flex-col items-center justify-center text-center","children":[["$","p",null,{"className":"font-display text-sm font-medium text-zinc-900 dark:text-white","children":"404"}],["$","h1",null,{"className":"mt-3 font-display text-3xl tracking-tight text-zinc-900 dark:text-white","children":"Page not found"}],["$","p",null,{"className":"mt-2 text-sm text-zinc-500 dark:text-zinc-400","children":"Sorry, we couldnâ€™t find the page youâ€™re looking for."}],["$","$L7",null,{"href":"/","className":"mt-8 text-sm font-medium text-zinc-900 dark:text-white","children":"Go back home"}]]}]}],"notFoundStyles":[],"styles":null}]}]}]}]}],null],null],[[["$","link","0",{"rel":"stylesheet","href":"/bayreuth_ai_association/_next/static/css/c6750efcaf6fd8ff.css","precedence":"next","crossOrigin":"$undefined"}]],"$L8"]]]]
9:I[4456,["231","static/chunks/231-829f56fdb7c75283.js","55","static/chunks/55-c141fc066ff4a19d.js","515","static/chunks/app/docs/use-cases-rag-chatbot/page-4b9d8097182892f7.js"],"DocsHeader"]
a:I[7408,["231","static/chunks/231-829f56fdb7c75283.js","55","static/chunks/55-c141fc066ff4a19d.js","515","static/chunks/app/docs/use-cases-rag-chatbot/page-4b9d8097182892f7.js"],"Fence"]
c:I[2553,["231","static/chunks/231-829f56fdb7c75283.js","55","static/chunks/55-c141fc066ff4a19d.js","515","static/chunks/app/docs/use-cases-rag-chatbot/page-4b9d8097182892f7.js"],"PrevNextLinks"]
d:I[817,["231","static/chunks/231-829f56fdb7c75283.js","55","static/chunks/55-c141fc066ff4a19d.js","515","static/chunks/app/docs/use-cases-rag-chatbot/page-4b9d8097182892f7.js"],"TableOfContents"]
b:T50a,# app.py
import streamlit as st
from openai import OpenAI

st.title("ðŸ¦Š LLM Expert")

# provide any string as an api_key parameter
client = OpenAI(base_url="http://127.0.0.1:8000", api_key="123")

if "openai_model" not in st.session_state:
    st.session_state["openai_model"] = "gpt-rag"

if "messages" not in st.session_state:
    st.session_state.messages = []

for message in st.session_state.messages:
    avatar = "ðŸ¦Š" if message["role"] == "assistant" else "ðŸ‘¤"
    with st.chat_message(message["role"], avatar=avatar):
        st.markdown(message["content"])

if prompt := st.chat_input("How can I assist you today?"):
    st.session_state.messages.append({"role": "user", "content": prompt})
    with st.chat_message("user", avatar="ðŸ‘¤"):
        st.markdown(prompt)

    with st.chat_message("assistant", avatar="ðŸ¦Š"):
        stream = client.chat.completions.create(
            model=st.session_state["openai_model"],
            messages=[
                {"role": m["role"], "content": m["content"]}
                for m in st.session_state.messages
            ],
            stream=False,
        )
        response = st.write_stream((i for i in stream.choices[0].message.content))
    st.session_state.messages.append({"role": "assistant", "content": response})
2:[["$","div",null,{"className":"min-w-0 max-w-2xl flex-auto px-4 py-16 lg:max-w-none lg:pl-8 lg:pr-0 xl:px-16","children":[["$","article",null,{"children":[["$","$L9",null,{"title":"Building a RAG chatbot"}],["$","div",null,{"className":"prose prose-teal max-w-none dark:prose-invert dark:text-teal-200 prose-headings:scroll-mt-28 prose-headings:font-display prose-headings:font-normal lg:prose-headings:scroll-mt-[8.5rem] prose-lead:text-teal-500 dark:prose-lead:text-teal-400 prose-a:font-semibold dark:prose-a:text-teal-400 prose-a:no-underline prose-a:shadow-[inset_0_-2px_0_0_var(--tw-prose-background,#fff),inset_0_calc(-1*(var(--tw-prose-underline-size,4px)+2px))_0_0_var(--tw-prose-underline,theme(colors.teal.300))] hover:prose-a:[--tw-prose-underline-size:6px] dark:[--tw-prose-background:theme(colors.teal.900)] dark:prose-a:shadow-[inset_0_calc(-1*var(--tw-prose-underline-size,2px))_0_0_var(--tw-prose-underline,theme(colors.teal.800))] dark:hover:prose-a:[--tw-prose-underline-size:6px] prose-pre:rounded-xl prose-pre:bg-zinc-900 prose-pre:shadow-lg dark:prose-pre:bg-zinc-700/40 dark:prose-pre:shadow-none dark:prose-pre:ring-1 dark:prose-pre:ring-zinc-100/10 dark:prose-hr:border-teal-800","children":[["$","h2",null,{"id":"overview","children":"Overview"}],["$","p",null,{"children":"Chatbots are among the most popular use cases for large language models (LLMs). They are designed to understand and respond to user inquiries, provide answers, perform tasks, or direct users to resources. Utilizing chatbots can significantly decrease customer support costs and improve response times to user requests. However, a common issue with chatbots is their tendency to deliver generic information when users expect domain-specific responses. Additionally, they may generate outdated information when users need current updates."}],["$","p",null,{"children":["For demonstrations, I have chosen the webpage about ",["$","a",null,{"href":"https://azure.microsoft.com/en-us/blog/introducing-phi-3-redefining-whats-possible-with-slms/","children":"Phi-3"}]," â€” a family of open AI models by Microsoft released in April 2024."]}],["$","p",null,{"children":"If we ask how many parameters Phi-3-mini model has, GPT-4 will generate a response indicating that it does not know the answer:"}],["$","$La",null,{"language":"python","children":"from openai import OpenAI\nclient = OpenAI()\n\ncompletion = client.chat.completions.create(\n  model=\"gpt-4-turbo\",\n  messages=[\n    {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n    {\"role\": \"user\", \"content\": \"How many parameters does the Phi-3-mini model from Microsoft have?\"}\n  ]\n)\n\nprint(completion.choices[0].message)\n\n# As of the last update, the Phi model variants by Microsoft, including the Phi-3-mini, are not explicitly defined in publicly available resources. There has been no detailed information released about a specific \"Phi-3-mini\" model.\n"}],["$","p",null,{"children":"If we ask GPT-3.5 the same question, it will hallucinate and provide incorrect information:"}],["$","$La",null,{"language":"python","children":"completion = client.chat.completions.create(\n  model=\"gpt-3.5-turbo\",\n  messages=[\n    {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n    {\"role\": \"user\", \"content\": \"How many parameters does the Phi-3-mini model from Microsoft have?\"}\n  ]\n)\n\nprint(completion.choices[0].message)\n\n# The Phi-3-mini model from Microsoft has 121 million parameters.\n"}],["$","p",null,{"children":"These problems can be addressed by using the retrieval-augmented generation (RAG) technique. This technique supplements the LLM with a knowledge base external to its training data sources. For instance, an organization's internal knowledge base, such as a Wiki or internal PDFs, can be provided."}],["$","p",null,{"children":"The tutorial below will demonstrate how to build a simple chatbot that utilizes RAG technique and can retrieve information about a recently released family of Phi-3 models."}],["$","hr",null,{}],["$","h2",null,{"id":"rag-architecture","children":"RAG Architecture"}],["$","p",null,{"children":["$","img",null,{"src":"https://gist.githubusercontent.com/iryna-kondr/f4779bfaa918e8af9ab1d455d63e142c/raw/ce8e33447a34db0259f888d39c58256c2cbf43b1/dingo_rag_use_case.svg","alt":"RAG Architecture"}]}],["$","p",null,{"children":"The basic steps of the Naive RAG include:"}],["$","p",null,{"children":["$","strong",null,{"children":"1. Indexing"}]}],["$","p",null,{"children":"Indexing starts with extraction of raw data from various formats such as webpage, PDF, etc. To manage the context restrictions of language models and increase the response accuracy, the extracted text is broken down into smaller, manageable chunks. For now, Dingo supports a recursive chunking that involves breaking down a large text input into smaller segments recursively until the chunks are of a desired size. The choice of the chunking size is heavily dependent on the needs of RAG application. Thus, it is recommeded to experiment with different sizes to select the best one that will allow preserving the context and maintaining the accuracy. The extracted chunks are encoded into vector representations using an embedding model and stored in a vector database."}],["$","p",null,{"children":["$","strong",null,{"children":"2. Retrieval"}]}],["$","p",null,{"children":"When a user submits a query, the RAG system uses the encoding model from the indexing phase to convert the query into a vector representation. It then calculates similarity scores between the query vector and the vectors of chunks in the vector database. The system identifies and retrieves the top K chunks with the highest similarity to the query. These chunks serve as the expanded context for the prompt."}],["$","p",null,{"children":["$","strong",null,{"children":"3. Generation"}]}],["$","p",null,{"children":"The users query and selected chunks are combined into a single prompt and passed to LLM. Thus, the model is provided with the necessary contextual information to formulate and deliver a response."}],["$","hr",null,{}],["$","h2",null,{"id":"chatbot-architecture-and-technical-stack","children":"Chatbot Architecture and Technical Stack"}],["$","p",null,{"children":["$","img",null,{"src":"https://gist.githubusercontent.com/iryna-kondr/f4779bfaa918e8af9ab1d455d63e142c/raw/7f8f41d5bf00a23638b8958cc970281857a43a6f/dingo_app_architecture.svg","alt":"App Architecture"}]}],["$","p",null,{"children":"On a high level, the application will consist of the following components:"}],["$","ol",null,{"children":[["$","li",null,{"children":["$","p",null,{"children":[["$","a",null,{"href":"https://streamlit.io/","children":"Streamlit"}]," application: provides a frontend interface for users to interact with a chatbot."]}]}],["$","li",null,{"children":["$","p",null,{"children":[["$","code",null,{"children":"FastAPI"}],": facilitates communication between the frontend and backend."]}]}],["$","li",null,{"children":["$","p",null,{"children":[["$","code",null,{"children":"GPT-4 Turbo"}]," model from OpenAI: LLM that generates responses upon receiving user queries."]}]}],["$","li",null,{"children":["$","p",null,{"children":[["$","code",null,{"children":"Embedding V3 small"}]," model from OpenAI: computes text embeddings."]}]}],["$","li",null,{"children":["$","p",null,{"children":[["$","a",null,{"href":"https://qdrant.tech/","children":"QDrant"}],": vector database that stores embedded chunks of text."]}]}]]}],["$","hr",null,{}],["$","h2",null,{"id":"implementation","children":"Implementation"}],["$","h3",null,{"id":"indexing","children":"Indexing"}],["$","h4",null,{"id":"step-1","children":"Step 1:"}],["$","p",null,{"children":"As the first step, we need to initialize an embedding model, a chat model and a vector store that will be populated with embedded chunks in the next step."}],["$","div",null,{"className":"my-8 flex rounded-3xl p-6 bg-amber-50 dark:bg-zinc-800/60 dark:ring-1 dark:ring-zinc-300/10","children":[["$","svg",null,{"aria-hidden":"true","viewBox":"0 0 32 32","fill":"none","className":"h-8 w-8 flex-none [--icon-foreground:theme(colors.zinc.900)] [--icon-background:theme(colors.white)]","children":[["$","defs",null,{"children":[["$","radialGradient",null,{"cx":0,"cy":0,"r":1,"gradientUnits":"userSpaceOnUse","id":":S1:-gradient","gradientTransform":"matrix(0 21 -21 0 20 11)","children":[["$","stop","0",{"stopColor":"#F53803"}],["$","stop","1",{"stopColor":"#FF7500","offset":".527"}],["$","stop","2",{"stopColor":"#FDBA74","offset":1}]]}],["$","radialGradient",null,{"cx":0,"cy":0,"r":1,"gradientUnits":"userSpaceOnUse","id":":S1:-gradient-dark","gradientTransform":"matrix(0 24.5001 -19.2498 0 16 5.5)","children":[["$","stop","0",{"stopColor":"#F53803"}],["$","stop","1",{"stopColor":"#FF7500","offset":".527"}],["$","stop","2",{"stopColor":"#FDBA74","offset":1}]]}]]}],["$","g",null,{"className":"dark:hidden","children":[["$","circle",null,{"cx":20,"cy":20,"r":12,"fill":"url(#:S1:-gradient)"}],["$","path",null,{"fillRule":"evenodd","clipRule":"evenodd","d":"M20 24.995c0-1.855 1.094-3.501 2.427-4.792C24.61 18.087 26 15.07 26 12.231 26 7.133 21.523 3 16 3S6 7.133 6 12.23c0 2.84 1.389 5.857 3.573 7.973C10.906 21.494 12 23.14 12 24.995V27a2 2 0 0 0 2 2h4a2 2 0 0 0 2-2v-2.005Z","className":"fill-[var(--icon-background)]","fillOpacity":0.5}],["$","path",null,{"d":"M25 12.23c0 2.536-1.254 5.303-3.269 7.255l1.391 1.436c2.354-2.28 3.878-5.547 3.878-8.69h-2ZM16 4c5.047 0 9 3.759 9 8.23h2C27 6.508 21.998 2 16 2v2Zm-9 8.23C7 7.76 10.953 4 16 4V2C10.002 2 5 6.507 5 12.23h2Zm3.269 7.255C8.254 17.533 7 14.766 7 12.23H5c0 3.143 1.523 6.41 3.877 8.69l1.392-1.436ZM13 27v-2.005h-2V27h2Zm1 1a1 1 0 0 1-1-1h-2a3 3 0 0 0 3 3v-2Zm4 0h-4v2h4v-2Zm1-1a1 1 0 0 1-1 1v2a3 3 0 0 0 3-3h-2Zm0-2.005V27h2v-2.005h-2ZM8.877 20.921C10.132 22.136 11 23.538 11 24.995h2c0-2.253-1.32-4.143-2.731-5.51L8.877 20.92Zm12.854-1.436C20.32 20.852 19 22.742 19 24.995h2c0-1.457.869-2.859 2.122-4.074l-1.391-1.436Z","className":"fill-[var(--icon-foreground)]"}],["$","path",null,{"d":"M20 26a1 1 0 1 0 0-2v2Zm-8-2a1 1 0 1 0 0 2v-2Zm2 0h-2v2h2v-2Zm1 1V13.5h-2V25h2Zm-5-11.5v1h2v-1h-2Zm3.5 4.5h5v-2h-5v2Zm8.5-3.5v-1h-2v1h2ZM20 24h-2v2h2v-2Zm-2 0h-4v2h4v-2Zm-1-10.5V25h2V13.5h-2Zm2.5-2.5a2.5 2.5 0 0 0-2.5 2.5h2a.5.5 0 0 1 .5-.5v-2Zm2.5 2.5a2.5 2.5 0 0 0-2.5-2.5v2a.5.5 0 0 1 .5.5h2ZM18.5 18a3.5 3.5 0 0 0 3.5-3.5h-2a1.5 1.5 0 0 1-1.5 1.5v2ZM10 14.5a3.5 3.5 0 0 0 3.5 3.5v-2a1.5 1.5 0 0 1-1.5-1.5h-2Zm2.5-3.5a2.5 2.5 0 0 0-2.5 2.5h2a.5.5 0 0 1 .5-.5v-2Zm2.5 2.5a2.5 2.5 0 0 0-2.5-2.5v2a.5.5 0 0 1 .5.5h2Z","className":"fill-[var(--icon-foreground)]"}]]}],["$","g",null,{"className":"hidden dark:inline","children":["$","path",null,{"fillRule":"evenodd","clipRule":"evenodd","d":"M16 2C10.002 2 5 6.507 5 12.23c0 3.144 1.523 6.411 3.877 8.691.75.727 1.363 1.52 1.734 2.353.185.415.574.726 1.028.726H12a1 1 0 0 0 1-1v-4.5a.5.5 0 0 0-.5-.5A3.5 3.5 0 0 1 9 14.5V14a3 3 0 1 1 6 0v9a1 1 0 1 0 2 0v-9a3 3 0 1 1 6 0v.5a3.5 3.5 0 0 1-3.5 3.5.5.5 0 0 0-.5.5V23a1 1 0 0 0 1 1h.36c.455 0 .844-.311 1.03-.726.37-.833.982-1.626 1.732-2.353 2.354-2.28 3.878-5.547 3.878-8.69C27 6.507 21.998 2 16 2Zm5 25a1 1 0 0 0-1-1h-8a1 1 0 0 0-1 1 3 3 0 0 0 3 3h4a3 3 0 0 0 3-3Zm-8-13v1.5a.5.5 0 0 1-.5.5 1.5 1.5 0 0 1-1.5-1.5V14a1 1 0 1 1 2 0Zm6.5 2a.5.5 0 0 1-.5-.5V14a1 1 0 1 1 2 0v.5a1.5 1.5 0 0 1-1.5 1.5Z","fill":"url(#:S1:-gradient-dark)"}]}]]}],["$","div",null,{"className":"ml-4 flex-auto","children":[["$","p",null,{"className":"m-0 font-display text-xl text-amber-900 dark:text-amber-500","children":"Note"}],["$","div",null,{"className":"prose mt-2.5 text-amber-800 [--tw-prose-underline:theme(colors.amber.400)] [--tw-prose-background:theme(colors.amber.50)] prose-a:text-amber-900 prose-code:text-amber-900 dark:text-zinc-300 dark:[--tw-prose-underline:theme(colors.amber.700)] dark:prose-code:text-zinc-300","children":["$","p",null,{"children":"It is needed to set OPENAI_API_KEY environment variable."}]}]]}]]}],["$","$La",null,{"language":"python","children":"# components.py\nfrom agent_dingo.rag.embedders.openai import OpenAIEmbedder\nfrom agent_dingo.rag.vector_stores.qdrant import Qdrant\nfrom agent_dingo.llm.openai import OpenAI\n\n# Initialize an embedding model\nembedder = OpenAIEmbedder(model=\"text-embedding-3-small\")\n\n# Initialize a vector store\nvector_store = Qdrant(collection_name=\"phi_3_docs\", embedding_size=1536, path=\"./qdrant_db\")\n\n# Initialize an LLM\nllm = OpenAI(model=\"gpt-4-turbo\")\n"}],["$","h4",null,{"id":"step-2","children":"Step 2:"}],["$","p",null,{"children":["Then, the website about ",["$","a",null,{"href":"https://azure.microsoft.com/en-us/blog/introducing-phi-3-redefining-whats-possible-with-slms/","children":"Phi-3"}]," family of models has to be parsed, chunked into smaller pieces, and embedded. The embedded chunks are used to populate a vector store."]}],["$","$La",null,{"language":"python","children":"# build.py\nfrom components import vector_store, embedder\nfrom agent_dingo.rag.readers.web import WebpageReader\nfrom agent_dingo.rag.chunkers.recursive import RecursiveChunker\n\n# Read the content of the website\nreader = WebpageReader()\ndocs = reader.read(\"https://azure.microsoft.com/en-us/blog/introducing-phi-3-redefining-whats-possible-with-slms/\")\n\n# Chunk the document\nchunker = RecursiveChunker(chunk_size=512)\nchunks = chunker.chunk(docs)\n\n# Embed the chunks\nembedder.embed_chunks(chunks)\n\n# Populate vector store with embedded chunks\nvector_store.upsert_chunks(chunks)\n"}],["$","p",null,{"children":"Run this script:"}],["$","$La",null,{"language":"bash","children":"python build.py\n"}],["$","p",null,{"children":"At this stage, the vector store is created, allowing chunks to be retrieved and incorporated into the prompt based on a user's query."}],["$","h4",null,{"id":"optional-step","children":"[Optional Step]"}],["$","p",null,{"children":"It is also possible to identify which chunks are retrieved and check their similarity scores to the user's query:"}],["$","$La",null,{"language":"python","children":"# test.py\nfrom components import vector_store, embedder\nquery = \"How many parameters does Phi-3-mini model from Microsoft have?\"\nquery_embedding = embedder.embed([query])[0]\n# select a single chunk (k=1) with the highest similarity to the query\nretrieved_chunks = vector_store.retrieve(k=1, query=query_embedding)\nprint(retrieved_chunks)\n#[RetrievedChunk(content=' Starting today,  Phi-3-mini , a 3.8B language model is available...', document_metadata={'source': 'https://azure.microsoft.com/en-us/blog/introducing-phi-3-redefining-whats-possible-with-slms/'}, score=0.7154231207501476)]\n"}],["$","p",null,{"children":"We can see that the correct chunk was retrieved, which indeed contains information about the number of parameters in the Phi-3-mini model."}],["$","h3",null,{"id":"retrieval-and-augmentation","children":"Retrieval and Augmentation"}],["$","h4",null,{"id":"step-3","children":"Step 3:"}],["$","p",null,{"children":"Once the vector store is created, we can create a RAG pipeline and serve it."}],["$","p",null,{"children":["Streamlit ",["$","a",null,{"href":"https://docs.streamlit.io/develop/api-reference/chat/st.chat_message","children":"only supports"}]," two types of messages: ",["$","code",null,{"children":"User"}]," and ",["$","code",null,{"children":"Assistant"}],". However, it us often more appropriate to include the retrieved data into the ",["$","code",null,{"children":"System"}]," message. Therefore, we use a custom block that injects a ",["$","code",null,{"children":"System"}]," message into the chat prompt before passing it to the RAG modifier."]}],["$","$La",null,{"language":"python","children":"# serve.py\nfrom agent_dingo.rag.prompt_modifiers import RAGPromptModifier\nfrom agent_dingo.serve import serve_pipeline\nfrom agent_dingo.core.blocks import InlineBlock\nfrom agent_dingo.core.state import ChatPrompt\nfrom agent_dingo.core.message import SystemMessage\nfrom components import vector_store, embedder, llm\n\n@InlineBlock()\ndef inject_system_message(state: ChatPrompt, context, store):\n    messages = state.messages\n    system_message = SystemMessage(\"You are a helpful assistant.\")\n    return ChatPrompt([system_message]+messages)\n\nrag = RAGPromptModifier(embedder, vector_store)\npipeline = inject_system_message>>rag>>llm\n\nserve_pipeline(\n    {\"gpt-rag\": pipeline},\n    host=\"127.0.0.1\",\n    port=8000,\n    is_async=False,\n)\n"}],["$","p",null,{"children":"Run the script:"}],["$","$La",null,{"language":"bash","children":"python serve.py\n"}],["$","p",null,{"children":["At this stage, we have a RAG pipeline compatible with the OpenAI API, named ",["$","code",null,{"children":"gpt-rag"}],", running on ",["$","code",null,{"children":"http://127.0.0.1:8000/"}],". The Streamlit application will send requests to this backend."]}],["$","h4",null,{"id":"step-4","children":"Step 4:"}],["$","p",null,{"children":"Finally, we can proceed with building a chatbot UI:"}],["$","$La",null,{"language":"python","children":"$b"}],["$","p",null,{"children":"Run the application:"}],["$","$La",null,{"language":"bash","children":"streamlit run app.py\n"}],["$","p",null,{"children":["ðŸŽ‰ We have successfully developed a chatbot that is augmented with the technical documentation of Phi-3 family of models."," ","If we pose the same question to this chatbot as we previously did to GPT-4 and GPT-3.5 models, we will observe that it correctly answers the question:"]}],["$","p",null,{"children":["$","img",null,{"src":"https://i.ibb.co/rQm0m41/Dingo-Chatbot.png","alt":"Dingo Chatbot"}]}],["$","hr",null,{}],["$","h2",null,{"id":"conclusion","children":"Conclusion"}],["$","p",null,{"children":"In this tutorial we have built a simple chatbot that utilizes RAG technique and successfully retrieves information from a vector store to generate up-to-date responses. It can be seen that Dingo enhances the development of LLM-based applications by offering essential (core) features and flexibility. That allows developers to quickly and easily create application prototypes."}]]}]]}],["$","$Lc",null,{}]]}],["$","$Ld",null,{"tableOfContents":[{"level":2,"id":"overview","title":"Overview","children":[]},{"level":2,"id":"rag-architecture","title":"RAG Architecture","children":[]},{"level":2,"id":"chatbot-architecture-and-technical-stack","title":"Chatbot Architecture and Technical Stack","children":[]},{"level":2,"id":"implementation","title":"Implementation","children":[{"level":3,"id":"indexing","title":"Indexing"},{"level":3,"id":"retrieval-and-augmentation","title":"Retrieval and Augmentation"}]},{"level":2,"id":"conclusion","title":"Conclusion","children":[]}]}]]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Building a RAG chatbot - Docs"}],["$","meta","3",{"name":"description","content":"Learn how to build a RAG chat bot."}],["$","link","4",{"rel":"icon","href":"/bayreuth_ai_association/favicon.ico","type":"image/x-icon","sizes":"16x16"}],["$","meta","5",{"name":"next-size-adjust"}]]
1:null
